plugins {
    id 'java'
    id 'application'
    id 'com.gradleup.shadow' version '8.3.6'
    id 'org.panteleyev.jpackageplugin' version '1.7.6'
}

group = 'org.truetranslation'
version = '1.0'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.xerial:sqlite-jdbc:3.45.1.0'
    implementation 'info.picocli:picocli:4.7.7'
    annotationProcessor 'info.picocli:picocli-codegen:4.7.7'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'org.slf4j:slf4j-nop:1.7.32'
    implementation 'com.formdev:flatlaf:3.2.5'
    implementation 'com.formdev:flatlaf-intellij-themes:3.2.5'
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    
    options.compilerArgs += [
        "-Aproject=${project.group}/${project.name}",
    ]
}

application {
    mainClass = 'org.truetranslation.mybible.cli.Main'
    applicationDefaultJvmArgs = ["-Dfile.encoding=UTF-8", "-Dsun.stdout.encoding=UTF-8"]
}

shadowJar {
    archiveBaseName = 'mybible-cli'
    archiveClassifier = ''
    archiveVersion = ''
    mergeServiceFiles()
}

jpackage {
    dependsOn 'shadowJar'

    appName = 'mybible-cli'
    appVersion = '1.0'
    vendor = 'Kos Ivantsov'
    copyright = 'Copyright © 2025 Kos Ivantsov'
    appDescription = 'MyBible CLI - A command-line and GUI tool for biblical text processing'

    input = file("${buildDir}/libs")
    mainJar = 'mybible-cli.jar'
    mainClass = application.mainClass.get()

    destination = layout.buildDirectory.dir('jpackage')

    javaOptions = [
        '-Dfile.encoding=UTF-8',
        '-Dsun.stdout.encoding=UTF-8'
    ]

    mac {
        macPackageIdentifier = 'org.truetranslation.mybible-cli'
        macPackageName = 'mybible-cli'
        type = 'APP_IMAGE'
        icon = file('src/main/resources/icons/mybible-cli.icns')
        macAppCategory = 'public.app-category.utilities'
        javaOptions = [
            '-Dfile.encoding=UTF-8',
            '-Dsun.stdout.encoding=UTF-8',
            '-Dapple.awt.application.appearance=system',
            '-Dapple.laf.useScreenMenuBar=true',
            '-Dapple.awt.application.name=mybible-cli',
            '-Xdock:name=mybible-cli'
        ]
    }

    windows {
        winMenu = true
        winDirChooser = true
        winShortcut = true
        winPerUserInstall = false
        type = 'MSI'
        icon = file('src/main/resources/icons/mybible-cli.ico')
    }

    linux {
        linuxPackageName = 'mybible-cli'
        linuxDebMaintainer = 'kos@truetranslation.org'
        linuxAppCategory = 'utils'
        linuxShortcut = true
        type = 'DEB'
        icon = file('src/main/resources/icons/mybible-cli.png')
    }
}

/// Portable Windows console version
task jpackageWindowsConsole(type: org.panteleyev.jpackage.JPackageTask) {
    dependsOn 'shadowJar'

    appName = 'mybible-cli-console'
    appVersion = '1.0'
    vendor = 'Kos Ivantsov'
    copyright = 'Copyright © 2025 Kos Ivantsov'
    appDescription = 'MyBible CLI - Portable Windows console version'

    input = file("${buildDir}/libs")
    mainJar = 'mybible-cli.jar'
    mainClass = application.mainClass.get()

    destination = layout.buildDirectory.dir('jpackage-windows-console')

    javaOptions = [
        '-Dfile.encoding=UTF-8',
        '-Dsun.stdout.encoding=UTF-8'
    ]

    windows {
        type = 'APP_IMAGE'  // Creates a portable app directory
        icon = file('src/main/resources/icons/mybible-cli.ico')
        winConsole = true
        
        javaOptions = [
            '-Dfile.encoding=UTF-8',
            '-Dsun.stdout.encoding=UTF-8',
            '-Dsun.stderr.encoding=UTF-8',
            '-Dconsole.encoding=UTF-8'
        ]
    }
}

// Create wrapper files next to the .exe after jpackage runs
task createWindowsWrapperFiles {
    dependsOn 'jpackageWindowsConsole'
    doLast {
        def appDir = layout.buildDirectory.dir('jpackage-windows-console').get().asFile
        def exeDir = new File(appDir, 'mybible-cli-console')  // The actual app directory
        
        // PowerShell wrapper
        def psWrapper = new File(exeDir, 'mybible-cli.ps1')
        psWrapper.text = '''# PowerShell wrapper for proper Unicode handling
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8
[Console]::InputEncoding = [System.Text.Encoding]::UTF8
$env:JAVA_TOOL_OPTIONS = "-Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8"

$exePath = Join-Path $PSScriptRoot "mybible-cli-console.exe"
& $exePath @args
'''
        
        // Batch wrapper using PowerShell
        def batchWrapper = new File(exeDir, 'mybible-cli-unicode.bat')
        batchWrapper.text = '''@echo off
powershell -ExecutionPolicy Bypass -File "%~dp0mybible-cli.ps1" %*
'''
        
        // Simple UTF-8 batch wrapper
        def simpleWrapper = new File(exeDir, 'mybible-cli-utf8.bat')
        simpleWrapper.text = '''@echo off
chcp 65001 >nul 2>&1
set JAVA_TOOL_OPTIONS=-Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8
"%~dp0mybible-cli-console.exe" %*
'''
        
        // Create README for portable usage
        def readme = new File(exeDir, 'README-Console.txt')
        readme.text = '''MyBible CLI - Portable Console Version
=======================================

This is a portable version that doesn't require installation.
Simply extract/copy this folder anywhere and run the wrappers.

Usage:
------
For best Unicode support, use one of these wrappers:

1. mybible-cli-unicode.bat (recommended for scripts)
   - Uses PowerShell for proper Unicode handling
   
2. mybible-cli.ps1 (for PowerShell users)
   - Direct PowerShell wrapper
   
3. mybible-cli-utf8.bat (simple batch wrapper)
   - Basic UTF-8 setup for cmd.exe

4. mybible-cli-console.exe (direct executable)
   - May require manual "chcp 65001" for Unicode

Examples:
---------
mybible-cli-unicode.bat list
mybible-cli-unicode.bat get -r "John 3:16"
mybible-cli-unicode.bat help format

Portable Usage:
---------------
You can:
1. Copy this entire folder anywhere on your system
2. Run from any location without installation
3. Add this folder to PATH for system-wide access
4. Create shortcuts to the wrapper files

No administrator rights required!
'''
        
        println "Created wrapper files next to executable in: ${exeDir.absolutePath}"
        println "Files created:"
        println "  - mybible-cli.ps1"
        println "  - mybible-cli-unicode.bat"
        println "  - mybible-cli-utf8.bat"
        println "  - README-Console.txt"
    }
}

// Make wrapper creation automatic
jpackageWindowsConsole.finalizedBy createWindowsWrapperFiles